#lang racket
(define (interfaz-principal)
  (displayln "Welcome to Taller de listas, these are the programs I worked, choose whatever fits you (if the program asks for a list, it has to be in parenthesis):")
  (displayln "1) It counts the times a number is in a list")
  (displayln "2) List that adds up itself digit by digit")
  (displayln "3) Average of a list")
  (displayln "4) Evaluates if two lists are the same")
  (displayln "5) Evaluates the amount of times a string is in a list")
  (displayln "6) Makes a list on base of a number and organizes it from higher to lower")
  (displayln "7) Multiplies by two every uneven position of the list")
  (displayln "8) A list of a number divisors")
  (displayln "9) University database")
  (displayln "10) Synonim dictionary")
  (displayln "11) Ends the program")
  (define opc (read))
  (cond
    ((= opc 1)(ej1))
    ((= opc 2)(ej2))
    ((= opc 3)(ej3))
    ((= opc 4)(ej4))
    ((= opc 5)(ej5))
    ((= opc 6)(ej6))
    ((= opc 7)(ej7))
    ((= opc 8)(ej8))
    ((= opc 9)(ej9))
    ((= opc 10)(ej10))
    )
  )
;_______________________________________________________________________________________
(define (ej1)
  (define (cuenta-recursiva lista num canti-repe contador)
  (if (= contador (length lista))
         (begin
           (display "The total elements of ")
           (display num)
           (display " is ")
           (display canti-repe)
           )
  (if (= (list-ref lista contador) num)
      (cuenta-recursiva lista num (+ canti-repe 1) (+ contador 1))
      (cuenta-recursiva lista num canti-repe (+ contador 1))
      )
  )
  )
(display "Insert the list you want to evaluate: ")
(define lista (read))
(display "Insert the number you want to evaluate: ")
(define num (read))
(cuenta-recursiva lista num 0 0)
  (retorno-prin)
  )
;______________________________________________________________________________________
(define (ej2)
  (define (sumalistas lista1 lista2 lista-result contador)
  (if(= contador (length lista1))
     (begin
       (display "The result of the list added by itself is: ")
       (display lista-result)
       )
     (begin
       (set! lista-result (append lista-result (list(+ (list-ref lista1 contador)(list-ref lista2 contador)))))
       (sumalistas lista1 lista2 lista-result (+ contador 1))
       )
     )
  )
(display "Insert a list for it to be added by itself: ")
(define lista1 (read))
(define lista2 lista1)
(sumalistas lista1 lista2 '() 0)
  (retorno-prin)
  )
;________________________________________________________________________________________
(define (ej3)
  (define (prom list cont suma)
  (if(= cont (length list))
     (begin
       (display "The list's average is: ")
       (display (exact->inexact (/ suma cont)))
       )
     (begin
       (set! suma (+ suma (list-ref list cont)))
       (prom list (+ cont 1) suma)
       )
     )
  )
(display "Insert the list you want to average: ")
(define list (read))
(prom list 0 0)
  (retorno-prin)
  )
;___________________________________________________________________________________________
(define (ej4)
  (define (igual? lista1 lista2 contador)
  (if (= (length lista1)(length lista2))
      (if(= (length lista1) contador)
         (display "Both lists are the same!")
         (if (= (list-ref lista1 contador)(list-ref lista2 contador))
             (igual? lista1 lista2 (+ contador 1))
             (display "Both lists are different!")
             )
         )
      (display "Both lists are different!")
      )
  )
(display "Insert the first list: ")
(define lista1 (read))
(display "Insert the list you want to compare with: ")
(define lista2 (read))
(igual? lista1 lista2 0)
  (retorno-prin)
  )
;___________________________________________________________________________________________________
(define (ej5)
  (define (cuenta-cadenas lista cadena canti-repe contador)
  (if (= contador (length lista))
         (begin
           (display "The total elements of ")
           (display cadena)
           (display " is ")
           (display canti-repe)
           )
  (if (equal? (list-ref lista contador) cadena)
      (cuenta-cadenas lista cadena (+ canti-repe 1) (+ contador 1))
      (cuenta-cadenas lista cadena canti-repe (+ contador 1))
      )
  )
  )
(display "Insert the list you want to evaluate: ")
(define lista (read))
(display "Insert the number you want to evaluate: ")
(define cadena (read))
(cuenta-cadenas lista cadena 0 0)
  (retorno-prin)
  )
;________________________________________________________________________________________________
(define (ej6)
  (define (ordenar-mayor-a-menor lista)
  (cond
    ((null? lista) '())
    (else
     (cons (maximo lista 0 (length lista)) (ordenar-mayor-a-menor (remover-maximo lista (maximo lista 0 (length lista)))))
     )
    )
  )

(define (maximo lista indice longitud)
  (cond
    ((= indice (- longitud 1)) (list-ref lista indice))
    ((> (list-ref lista indice) (maximo lista (+ indice 1) longitud)) (list-ref lista indice))
    (else (maximo lista (+ indice 1) longitud))
    )
  )

(define (remover-maximo lista maximo)
  (cond
    ((null? lista) '())
    ((equal? (list-ref lista 0) maximo) (rest lista))
    (else (cons (list-ref lista 0) (remover-maximo (rest lista) maximo)))
    )
  )

(define (guardar-digitos numero)
  (define (guardar-digitos-aux numero digitos)
    (if (zero? numero)
        digitos
        (guardar-digitos-aux (quotient numero 10)
                            (cons (remainder numero 10) digitos))))
  
  (guardar-digitos-aux numero '())
  )
  (retorno-prin)
)
;________________________________________________________________________________________________
(define (ej7)
  (define (multi2 lista contador lista-final)
  (if(= (length lista) contador)
     (begin
       (display "The list result is: ")
       (display lista-final)
       )
     (if(integer? (/ contador 2))
        (begin
          (set! lista-final (append lista-final (list (* (list-ref lista contador) 2))))
          (multi2 lista (+ contador 1) lista-final)
          )
        (begin
          (set! lista-final (append lista-final (list (list-ref lista contador))))
          (multi2 lista (+ contador 1) lista-final)
          )
        )
     )
  )
(display "Insert the list you want to double uneven positions: ")
(define lista (read))
(multi2 lista 0 '())
  (retorno-prin)
  )
;________________________________________________________________________________________________-
(define (ej8)
  (define (guardar-divisores num contador lista)
  (if(= contador num)
     (begin
       (set! lista (append lista (list contador)))
       (display "The divisors of the number are: ")
       (display lista)
       )
     (if (integer? (/ num contador))
         (begin
           (set! lista (append lista (list contador)))
           (guardar-divisores num (+ contador 1) lista)
           )
         (guardar-divisores num (+ contador 1) lista)
         )
     )
  )
(display "Insert the number you want to know its divisors: ")
(define num (read))
(guardar-divisores num 1 '())
  (retorno-prin)
  )
;______________________________________________________________________________________________
(define (ej9)
  (define (registrar posicion lista-final)
  (display "Insert the student's code: ")
  (define codigo (read))
  (newline)
  (display "Insert the student's name: ")
  (define nombre (read))
  (newline)
  (display "Insert the program of the student: ")
  (define programa (read))
  (set! lista-final (append lista-final (list(list codigo nombre programa))))
  (interfaz posicion lista-final)
  )
(define (buscar-estudiante codigo lista-estudiantes)
  (define (buscar codigo estudiante)
    (cond
      ((null? estudiante) "The student isn't registered!")
      ((equal? codigo (list-ref estudiante 0)) (list (list-ref estudiante 1) (list-ref estudiante 2)))
      (else (buscar codigo (rest estudiante)))))
  (cond
    ((null? lista-estudiantes) "The student isn't registered!")
    (else (buscar codigo (car lista-estudiantes))))) 

(define (interfaz posicion lista-final)
  (displayln "What do you want to do?")
  (display "1) Register a student \n2) Search a student by his code in the system \n")
  (define opc (read))
  (if (= opc 1)
      (registrar posicion lista-final)
      (if (= opc 2)
          (begin
            (display "Insert his code: ")
            (displayln (buscar-estudiante (read) lista-final))
            (retorno posicion lista-final)
            )
          (begin
            (display "That's not an option, try again.")
            (interfaz posicion lista-final)
            )
          )
      )
  )
(define (retorno posicion lista-final)
  (displayln "Do you want to go back?")
  (displayln "1) Yes \n2) No \n")
  (define opc (read))
  (cond
    ((= opc 1)(interfaz posicion lista-final))
    ((= opc 2)(void))
    (else (display "That's not an option, try again")
          (retorno))
    )
  )
(interfaz 0 '())
  (retorno-prin)
  )
;_____________________________________________________________________________________
(define (ej10)
  (define (registrar posicion lista-final)
  (display "Insert the word: ")
  (define palabra (read))
  (newline)
  (display "Insert the first synonim: ")
  (define sinon1 (read))
  (newline)
  (display "Insert the second synonim: ")
  (define sinon2 (read))
  (newline)
  (display "Insert the third synonim: ")
  (define sinon3 (read))
  (set! lista-final (append lista-final (list(list palabra sinon1 sinon2 sinon3))))
  (interfaz posicion lista-final)
  )
(define (buscar-sinon palabra lista)
  (define (buscar codigo estudiante)
    (cond
      ((null? estudiante) "The word isn't registered!")
      ((equal? codigo (list-ref estudiante 0)) (list (list-ref estudiante 1) (list-ref estudiante 2) (list-ref estudiante 3)))
      (else (buscar codigo (rest estudiante)))))
  (cond
    ((null? lista) "The word isn't registered!")
    (else (buscar palabra (car lista))))) 

(define (interfaz posicion lista-final)
  (displayln "What do you want to do?")
  (display "1) Register a word \n2) Search synonims by its word in the system \n")
  (define opc (read))
  (if (= opc 1)
      (registrar posicion lista-final)
      (if (= opc 2)
          (begin
            (display "Insert his code: ")
            (displayln (buscar-sinon (read) lista-final))
            (retorno posicion lista-final)
            )
          (begin
            (display "That's not an option, try again.")
            (interfaz posicion lista-final)
            )
          )
      )
  )
(define (retorno posicion lista-final)
  (displayln "Do you want to go back?")
  (displayln "1) Yes \n2) No \n")
  (define opc (read))
  (cond
    ((= opc 1)(interfaz posicion lista-final))
    ((= opc 2)(void))
    (else (display "That's not an option, try again")
          (retorno))
    )
  )
(interfaz 0 '())
  (retorno-prin)
  )
;_________________________________________________________________________________________________
(define (retorno-prin)
  (displayln "\n\nDo you want to go to the main function, or end the program?")
  (display "1) Return \n2)End \n")
  (define opc (read))
  (cond
    ((= opc 1)(interfaz-principal))
    ((= opc 2)(void))
    (else (display "That's not an option, try again")
          (retorno-prin))
    )
  )
  (interfaz-principal)