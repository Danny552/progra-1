#lang racket
(define (nota)
  (define n (read-char))
  (if (char=? n #\E)
      (display "Excelente")
      (if(char=? n #\B)
         (display "Bueno")
         (if(char=? n #\A)
            (display "Aceptable")
            (if(char=? n #\D)
               (display "Deficiente")
               (if(char=? n #\I)
                  (display "Insuficiente")
                  (display "Error")
                  )
               )
            )
         )
      )
  )
(define (cadena-recursiva cadena contador posición)
(if (= posición (- (string-length cadena) 1))
    (begin
      (display "El número de palabras es: ")
      (display contador)
      )
    (if(char=?(string-ref cadena posición) #\space)
       (cadena-recursiva cadena (+ contador 1) (+ posición 1))
       (cadena-recursiva cadena contador (+ posición 1))
       )
    )
  )
(define (cadena-palabras)
  (define cadena (read-line))
  (cadena-recursiva cadena 1 0)
)
(define (generador-correos cadena posición contador iniciales)
 (if (= posición (- (string-length cadena) 1))
    (begin
      (display iniciales)
      (display "@utp.edu.co")
      )
    (if(char-upper-case? (string-ref cadena posición))
       (begin
         (string-set! iniciales (+ contador 1) (string-ref cadena contador))
       (generador-correos cadena (+ contador 1) (+ posición 1) iniciales)
       )
       (generador-correos cadena contador (+ posición 1) iniciales)
       )
    )
  )
(define (nombre-completo)
  (define nombre (read-line))
  (generador-correos nombre 1 0 (make-string 4 #\null))
  )
 (nombre-completo)
;_____________________________________________________________________________________________
(define (colección-cadenas)
  (