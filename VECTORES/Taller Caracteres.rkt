#lang racket
(define(caracter?)
  (char? (read))
  )
(define (esVocal)
  (define vocal (read-char))
  (if (or (char-ci=? vocal #\a)(char-ci=? vocal #\e)(char-ci=? vocal #\i)(char-ci=? vocal #\o)(char-ci=? vocal #\u))
      #t
      #f
      )
  )
(define (esVocalTexto)
  (define vocal (read-char))
  (if (or (char-ci=? vocal #\a)(char-ci=? vocal #\e)(char-ci=? vocal #\i)(char-ci=? vocal #\o)(char-ci=? vocal #\u))
      (display "Es vocal")
      (display "Error")
      )
  )
(define (mayor-igual?)
  (define ch1 (read-char))
  (read-char)
  (define ch2 (read-char))
  (read-char)
  (cond
    [(char=? ch1 ch2)(display "son iguales")]
    [(char>? ch1 ch2)(display "Es mayor el primer caracter")]
    [(char<? ch1 ch2)(display "Es mayor el segundo caracter")]
    )
  )
(define (numero-viceversa)
        (define n (read))
  (cond
    [(number? n)(display (integer->char n))]
    [(char? n)(display (char->integer n))]
    )
  )
(define (alfanumero)
  (define n (read-char))
  (if(char-alphabetic? n)
     (if(char-upper-case? n)
        (display "Es alfabético y mayúscula")
        (display "Es alfabético y minúscula")
        )
     (if(char-numeric? n)
        (display "Es numérico")
        (if(char-whitespace? n)
           (display "Es un espacio en blanco")
           (void)
           )
        )
     )
  )
(define(mayusminus)
  (define n (read-char))
  (if(> 33 (-(char->integer n) 32))
     (display "Es numérico")
  (if(<= 65 (-(char->integer n) 32))
     (display "Está en minúscula")
     (display "Está en mayúscula")
     )
  )
  )
(define (simayusaminus)
  (define n (read-char))
  (if (char-upper-case? n)
      (display(char-downcase n))
      (if(char-lower-case? n)
         (display(char-upcase n))
         (display "Es un caracter no válido")
         )
      )
  )
(define (recursiva n N error)
  (displayln "¿Desea salir del programa?")
  (define son (read-char))
  (read-char)
  (if (char-ci=? son #\s)
      (begin
        (display "La cantidad de n fueron: ")
        (displayln n)
        (display "La cantidad de N fueron: ")
        (displayln N)
        (display "La cantidad de errores fueron: ")
        (display error)
        )
      (if(char=? son #\n)
         (begin
           (displayln "Volviendo a la función...")
           (recursiva (+ n 1) N error)
           )
         (if(char=? son #\N)
            (begin
              (displayln "Volviendo a la función...")
              (recursiva n (+ N 1) error)
              )
            (begin
              (displayln "Error...")
              (recursiva n N (+ error 1))
              )
            )
         )
      )
  )
(recursiva 0 0 0)