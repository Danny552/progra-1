#lang racket
(define (retorno)
  (displayln "¿Quiere volver a generar los valores?")
  (displayln "1) Si  2) No")
  (define usuario (read))
  [cond
    [(= usuario 1)(interfaz)]
    [(= usuario 2)(void)]
    (else(display "esa no era una opción, PROGRAMA FINALIZADO"))
    ]
  )
(define (creav x b)
  (define m (make-vector x 0))
  (cream m 0 b)
  (llenam m 0 0 (random 100))
  (mostrarm m 0 0)
)

(define (cream v p b)
  (if (< p (vector-length v))
      (begin
        (vector-set! v p (make-vector b 1))
        (cream v (+ p 1) b)
      )
      (display "")
   )
 )

(define (llenam v f c val)
  (set! val (random 100))
  (if (< f (vector-length v))
    (if (< c (vector-length (vector-ref v f)))
        (begin
          (vector-set! (vector-ref v f) c val)
          (llenam v f (+ c 1) (+ val 1))
        )
        (llenam v (+ f 1) 0 val)
     )
    (display "")
  )
)

(define (mostrarm v f c)
  (if (< f (vector-length v))
    (if (< c (vector-length (vector-ref v f)))
        (begin
          (display (vector-ref (vector-ref v f) c))
          (display " ")
          (mostrarm v f (+ c 1))
        )
        (begin
          (newline) 
          (mostrarm v (+ f 1) 0)
        )
     )
    (display "")
  )
)
(define (interfaz)
  (display "Bienvenido a un vector con otros vectores")
  (newline)
  (newline)
  (display "Inserte la cantidad de filas de la matriz: ")
  (define filas (read))
  (newline)
  (display "Ahora, inserte la cantidad de columnas deseadas: ")
  (define columnas (read))
  (creav filas columnas)
  (retorno)
  )
(interfaz)
